parameters:
- name: README
  description: These parameters are useful to quickly change some metadata. However, there are still things you MUST change in the template, like resource limits and container specs (environment)!
  value: FIRST
- name: NAME
  description: This is the component name which will be also visible in Openshift. Add a suffix like -api, -worker, -sync, -datafetch, ...
  value: test-worker
- name: VERSION
  description: This is the component major version, must follow v[0-9]+ format.
  value: v1
- name: APP
  description: This is the application name of which the component is part of. For example the test-api is part of the notification application. 
  value: test
- name: NAMESPACE
  description: This is the namespace where the component will be deployed. The namespace correspondents with the business domain where the component or application is part of. The environment suffixes dv, qa or pr are allready provided where needed in the template with the ENV variable. 
  value: namespace
- name: ENV
  description: This is the environment suffix, i.e. dv, qa or pr.
  value: dv
- name: IMAGE_TAG
  description: This is the tag of the image that should be deployed. Our CICD will set this property automatically!
  value: "0"
- name: APM_SERVICE_NAME
  description: The Elastic APM service name should be written in full and be the same for all environments.
  value: Servicename API | Servicename WORKER | Servicename DATAFETCH | ...
apiVersion: v1
kind: Template
metadata:
  name: ${NAME}-${VERSION}
objects:
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: ${NAME}-${VERSION}
    namespace: ${NAMESPACE}${ENV}
    labels:
      app: ${APP}
      component: ${NAME}-${VERSION}
      version: ${VERSION}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      component: ${NAME}-${VERSION}
    strategy:
      activeDeadlineSeconds: 120
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 60
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        name: ${NAME}-${VERSION}
        namespace: ${NAMESPACE}${ENV}
        labels:
          app: ${APP}
          component: ${NAME}-${VERSION}
          version: ${VERSION}
      spec:
        containers:
        - env:
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${NAME}-${VERSION}-secrets
                key: DB_PASSWORD
          - name: DB_USER
            valueFrom: 
              secretKeyRef:
                name: ${NAME}-${VERSION}-secrets
                key: DB_USER
          - name: AMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${NAME}-${VERSION}-secrets
                key: AMQ_PASSWORD
          - name: AMQ_USER
            valueFrom:
              secretKeyRef:
                name: ${NAME}-${VERSION}-secrets
                key: AMQ_USER
          - name: AMQ_HOST
            value: ""
          - name: AMQ_POOL
            value: "true"
          - name: AMQ_QUEUE_PREFIX
            value: ${NAMESPACE}${ENV}.${APPLICATION}.${VERSION}.${NAME}.
          - name: AMQ_QUEUE_CREATION
            value: creation
          - name: AMQ_QUEUE_UPDATE
            value: update
          - name: AMQ_QUEUE_ARCHIVE
            value: archive
          - name: AMQ_QUEUE_COMPLETION
            value: completion
          - name: DB_HOST
            value: ""
          - name: SPRING_PROFILES_ACTIVE
            value: "production"
          - name: "APP_NAMESPACE_PREFIX"
            value: "${NAMESPACE}/${NAME}/${VERSION}"
          - name: "APP_LOG_LEVEL"
            value: "INFO"
          - name: "APP_MOCKING"
            value: "FALSE"
          - name: APM_SECRET_TOKEN
            valueFrom:
              secretKeyRef:
                name: apm-secrets
                key: SECRETTOKEN
          - name: APM_SERVER_URL
            valueFrom:
              secretKeyRef:
                name: apm-secrets
                key: SERVERURL
          - name: APM_VERIFY_SERVER_CERT
            valueFrom:
              secretKeyRef:
                name: apm-secrets
                key: SERVERCERT
          - name: APM_CENTRAL_CONFIG
            valueFrom:
              secretKeyRef:
                name: apm-secrets
                key: CENTRALCONFIG
          - name: APM_SERVICE_NAME
            value: ${APM_SERVICE_NAME}
          - name: APM_ENVIRONMENT
            value: 'DV'
          image: docker-registry.default.svc:5000/d09build/${NAME}-${VERSION}:${IMAGE_TAG}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /${NAMESPACE}/${NAME}/${VERSION}/status/am-i-up
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /${NAMESPACE}/${NAME}/${VERSION}/status/aggregate
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: ${NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: 
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 25Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}-${VERSION}
    namespace: ${NAMESPACE}${ENV}
    labels:
      app: ${APP}
      component: ${NAME}-${VERSION}
      version: ${VERSION}
  spec:
    ports:
    - name: ${NAME}-${VERSION}-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP}
      component: ${NAME}-${VERSION}
    sessionAffinity: None
    type: ClusterIP
